//===-- Comet2InstrInfo.td - Target Description for COMET II -*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file describes the COMET-II instructions in TableGen format.
//
//===----------------------------------------------------------------------===//

include "Comet2InstrFormats.td"

class Comet2InstReg<bits<8> op, string asmstr, SDNode OpNode, InstrItinClass itin,
    RegisterClass RC>
    : Comet2InstFormReg<op, (outs RC:$r1), (ins RC:$r2, RC:$r3),  // TODO $r1 $r2 は実際には同じ
                        !strconcat(asmstr, " $r1, $r3"),
                        [(set RC:$r1, (OpNode RC:$r2, RC:$r3))], itin> {
}

def ADDAREG : Comet2InstReg<0x20, "ADDA", add, IICAlu, IntRegs>;
def SUBAREG : Comet2InstReg<0x21, "SUBA", sub, IICAlu, IntRegs>;


// 即値ロード用のオペランド. 16bit
// 16-0: 符号付き16bit整数
// EncoderMethod: bit列から符号付き16bit整数を取得
def imm16 : Operand<i16> {
  let EncoderMethod = "get16bitOpValue";
}

def calltarget  : Operand<iPTR> {
  let EncoderMethod = "getCallTargetOpValue";
}

// 符号付き16bit整数
// 定数(ISD::Constant)で16bitで表現可能なもの
def immSExt16 : PatLeaf<(imm), [{ return isInt<16>(Imm); }]>;

// 即値ロード
class LoadI<bits<8> op, string asmstr>
    : Comet2InstFormAdr<op, (outs IntRegs:$r), (ins imm16:$addr),
                        !strconcat(asmstr, " $r, $addr"),
                        [(set IntRegs:$r, immSExt16:$addr)], IICLoad> {
}

def LAD : LoadI<0x12, "LAD">;


// レジスタ間ロード
class LoadR<bits<8> op, string asmstr>
    : Comet2InstFormReg<op, (outs IntRegs:$r1), (ins IntRegs:$r2),
                        !strconcat(asmstr, " $r1, $r2"),
                        [(set IntRegs:$r1, IntRegs:$r2)], IICLoad> {
}

def LDREG : LoadR<0x14, "LD">;


// Call命令
def SDT_Comet2Call : SDTypeProfile<0, 1, [SDTCisVT<0, iPTR>]>;

def Comet2Call : SDNode<"Comet2ISD::Call", SDT_Comet2Call,
                        [SDNPHasChain, SDNPOutGlue, SDNPOptInGlue,
                         SDNPVariadic]>;

class Call<bits<8> op, string asmstr>
    : Comet2InstFormAdr<op, (outs), (ins calltarget:$adr, variable_ops),
                        !strconcat(asmstr, " $adr"), [(Comet2Call imm:$adr)],
                        IICBranch> {
    let isCall = 1;
    let DecoderMethod = "DecodeCallTarget";
    let r = 0;
    let x = 0;
}

def CALL : Call<0x80, "CALL">;

// Pat 第1引数にマッチしたパターンを第2引数に変換する
def : Pat<(Comet2Call (i16 tglobaladdr:$dst)),
          (CALL tglobaladdr:$dst)>;
def : Pat<(Comet2Call (i16 texternalsym:$dst)),
          (CALL texternalsym:$dst)>;


// Ret命令
def SDT_Comet2Ret : SDTypeProfile<0, 1, [SDTCisInt<0>]>;
def Comet2Ret : SDNode<"Comet2ISD::Ret", SDT_Comet2Ret,
                       [SDNPHasChain, SDNPOptInGlue, SDNPVariadic]>;

class RetInst<bits<8> op, string asmstr>
    : Comet2InstFormAdr<op, (outs), (ins), asmstr,
                        [(Comet2Ret)], IICBranch> {
    let isBranch = 1;
    let isTerminator = 1;
    let isBarrier = 1;
    let isReturn = 1;
}


def mem : Operand<i16> {
    let PrintMethod = "printMemOperand";
    let MIOperandInfo = (ops IntRegs, i16imm);
    let EncoderMethod = "getMemEncoding";
}

def addr : ComplexPattern<iPTR, 2, "SelectAddr", [], []>;

// Load/Store命令共通フォーマット
class FMem<bits<8> op, dag outs, dag ins, string asmstr, list<dag> pattern,
    InstrItinClass itin>
    : Comet2InstFormAdr<op, outs, ins, asmstr, pattern, itin> {
    bits<16> addr;
    let Inst{15-0} = addr;
    let DecoderMethod = "DecodeMem";
}

// Load命令
class LoadM<bits<8> op, string asmstr, RegisterClass RC>
    : FMem<op, (outs RC:$r), (ins mem:$addr),
           !strconcat(asmstr, " $r $addr"),
           [(set RC:$r, (load addr:$addr))], IICLoad>;

// Store命令
class StoreM<bits<8> op, string asmstr, RegisterClass RC>
    : FMem<op, (outs), (ins RC:$r, mem:$addr),
           !strconcat(asmstr, " $r $addr"),
           [(store RC:$r, addr:$addr)], IICStore>;

def LD : LoadM<0x10, "LD", IntRegs>;
def ST : StoreM<0x11, "ST", IntRegs>;

